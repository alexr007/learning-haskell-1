ghci
if ... then ... else
xs=[1,2,3]
0:[1,2,3]
[]
"Steve Buscemi" !! 6
head
tail
init
last
null
reverse
take 3 [...]
drop 3 [...]
maximum
minimum
sum
product
elem === contains
[11..20]
[2,4..20]
[2,4,6,8,10,12,14,16,18,20]
[0.1, 0.3 .. 1]
[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]
take 24 [13,26..]
take 10 (cycle [1,2,3])
[1,2,3,1,2,3,1,2,3,1]
take 12 (cycle "LOL ")
"LOL LOL LOL "
take 10 (repeat 5)
[5,5,5,5,5,5,5,5,5,5]
take 10 [2,4..].
[x*2 | x <-[1..10]]
[x*2 | x <- [1..10], x*2 >= 12]
[ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
boomBangs [7..13]
["BOOM!","BOOM!","BANG!","BANG!"]
[ x | x <- [10..20], x /= 13, x /= 15, x /= 19]
[ x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]
[55,80,100,110]
length' xs = sum [1 | _ <- xs]
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]
[ [ x | x <- xs, even x] | xs <- xxs]
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]
fst
snd
zip tuples
let triangles =       [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10] ]
let rightTriangles =  [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]
let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]
====================
:t 'a'
'a' :: Char
:t "hello"
"hello" :: String
:t (True, 'a')
(True, 'a') :: (Bool, Char)
:t 'H':'e':'l':[]
'H':'e':'l':[] :: [Char]

String === [Char]
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
:t removeNonUppercase
removeNonUppercase :: [Char] -> [Char]

addThree x y z = x + y + z
:t addThree
addThree :: Num a => a -> a -> a -> a
====================
Int       = 4 bytes: -2B..2B
Integer   = not bounded
Float
Double
Bool
Char
tuples
empty tuple ()


factorial n = product [1..n]
:t factorial
factorial :: (Num a, Enum a) => a -> a

:t head
head :: [a] -> a
read "5" :: Int
read "[1,2,3,4]" :: [Int]

Enum = (), Bool, Char, Ordering, Int, Integer, Float and Double
Eq
Ord
Ordering
Show
Read
Bounded: minBound maxBound
maxBound :: (Bool, Int, Char)
literate programming" and "reproducible research
Num
Integral = Int + Integer
Floating = Float + Double

4 * (let a = 9 in a + 1) + 2
[let square x = x * x in (square 5, square 3, square 2)]
(let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)
